from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database_design import Base, Department, Employee, Project, Client, ProjectAllocation, Task, TaskComment, \
    TaskAttachment, Meeting, MeetingParticipant, Skill, EmployeeSkill, Timesheet, Leave, PerformanceReview, \
    AuditLog, HardwareAsset, ProjectHardwareUsage, User
from faker import Faker
import random
from datetime import datetime, timedelta
import bcrypt

# Initialize Faker
fake = Faker()

# Database connection
DATABASE_URL = "postgresql+psycopg2://postgres:jagasrib@localhost/project"
engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
db = SessionLocal()

def hash(password):
    return bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')

def seed_database():
    db.query(ProjectHardwareUsage).delete()
    db.query(HardwareAsset).delete()
    db.query(AuditLog).delete()
    db.query(PerformanceReview).delete()
    db.query(Leave).delete()
    db.query(Timesheet).delete()
    db.query(EmployeeSkill).delete()
    db.query(Skill).delete()
    db.query(MeetingParticipant).delete()
    db.query(Meeting).delete()
    db.query(TaskAttachment).delete()
    db.query(TaskComment).delete()
    db.query(Task).delete()
    db.query(ProjectAllocation).delete()
    db.query(Project).delete()
    db.query(Client).delete()
    db.query(Employee).delete()
    db.query(Department).delete()
    db.query(User).delete()
    db.commit()

    # Seed Departments with specific names
    department_names = ["Developer", "Tester", "Project Management"]
    departments = []
    for name in department_names:
        dept = Department(name=name, department_id=f"DEPT-{random.randint(10, 99)}")
        db.add(dept)
        departments.append(dept)
    db.commit()

    # Seed Skills
    skill_names = ["Python", "SQL", "React", "Java", "Project Management"]
    skills = []
    for name in skill_names:
        s = Skill(name=name)
        db.add(s)
        skills.append(s)
    db.commit()

    # Seed Clients
    clients = []
    for _ in range(5):
        c = Client(name=fake.company())
        db.add(c)
        clients.append(c)
    db.commit()

    # Seed Employees
    employees = []
    for _ in range(10):
        emp = Employee(
            employee_id=fake.uuid4(),
            name=fake.name(),
            email=fake.email(),
            date_of_birth=fake.date_of_birth(),
            date_of_joining=fake.date_this_decade(),
            department_id=random.choice(departments).id,
            role=random.choice(["GenAI Developer", "Prompt Engineer", "Associate Developer"])
        )
        db.add(emp)
        employees.append(emp)
    db.commit()

    # Seed Employee Skills
    for emp in employees:
        for _ in range(random.randint(1, 3)):
            emp_skill = EmployeeSkill(
                employee_id=emp.id,
                skill_id=random.choice(skills).id,
                level=random.choice(["Beginner", "Intermediate", "Advanced"])
            )
            db.add(emp_skill)
    db.commit()

    # Seed Projects
    projects = []
    for _ in range(5):
        proj = Project(
            name=fake.catch_phrase(),
            client_id=random.choice(clients).id,
            start_date=fake.date_this_year(),
            end_date=fake.date_between(start_date='+30d', end_date='+180d'),
            poc_type=random.choice(["AI", "Web", "Mobile"])
        )
        db.add(proj)
        projects.append(proj)
    db.commit()

    # Project Allocations
    for proj in projects:
        for _ in range(random.randint(2, 4)):
            alloc = ProjectAllocation(
                project_id=proj.id,
                employee_id=random.choice(employees).id,
                percentage_allocation=random.randint(20, 100),
                allocation_start_date=proj.start_date,
                allocation_end_date=proj.end_date
            )
            db.add(alloc)
    db.commit()

    # Tasks and Comments
    tasks = []
    for proj in projects:
        for _ in range(3):
            t = Task(title=fake.sentence(nb_words=4), project_id=proj.id)
            db.add(t)
            tasks.append(t)
    db.commit()

    for task in tasks:
        for _ in range(random.randint(0, 3)):
            c = TaskComment(task_id=task.id, content=fake.text())
            db.add(c)
    db.commit()

    for task in random.sample(tasks, min(5, len(tasks))):
        att = TaskAttachment(task_id=task.id, file_path=fake.file_path())
        db.add(att)
    db.commit()

    # Meetings and Participants
    meetings = []
    for _ in range(5):
        m = Meeting(title=fake.bs(), scheduled_time=fake.date_time_this_year())
        db.add(m)
        meetings.append(m)
    db.commit()

    for m in meetings:
        for _ in range(3):
            part = MeetingParticipant(meeting_id=m.id, employee_id=random.choice(employees).id)
            db.add(part)
    db.commit()

    # Timesheets, Leaves, Reviews
    for emp in employees:
        for _ in range(3):
            ts = Timesheet(employee_id=emp.id, hours=random.randint(4, 10), date=fake.date_this_year())
            db.add(ts)

        if random.choice([True, False]):
            lv = Leave(employee_id=emp.id, start_date=fake.date_this_year(), end_date=fake.date_this_year(), status=random.choice(["Approved", "Rejected", "Pending"]))
            db.add(lv)

        pr = PerformanceReview(employee_id=emp.id, reviewer=fake.name(), score=random.randint(1, 5), feedback=fake.text())
        db.add(pr)
    db.commit()

    # Audit Logs
    for _ in range(10):
        log = AuditLog(action=fake.sentence(), user_id=random.choice(employees).id, timestamp=fake.date_time_this_year())
        db.add(log)
    db.commit()

    # Hardware Assets and Usage
    assets = []
    for _ in range(5):
        h = HardwareAsset(asset_tag=fake.bothify(text='AST-#####'), type=random.choice(["Laptop", "Tablet"]), assigned_to=random.choice(employees).id)
        db.add(h)
        assets.append(h)
    db.commit()

    for asset in assets:
        usage = ProjectHardwareUsage(hardware_id=asset.id, project_id=random.choice(projects).id, start_date=fake.date_this_year(), end_date=None)
        db.add(usage)
    db.commit()

    # Seed Users
    users = []
    for _ in range(10):
        username = fake.user_name()
        password = "password123"
        hashed_pw = hash(password)
        user = User(
            username=username,
            hashed_password=hashed_pw,
            role=random.choice(["admin", "employee"])
        )
        db.add(user)
        users.append(user)
    db.commit()

    print("Users created:")
    for user in users:
        print(f"Username: {user.username}, Password: password123")

    print("Database seeded successfully!")

if __name__ == "__main__":
    seed_database()
